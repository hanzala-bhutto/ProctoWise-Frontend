{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "warnOnUnsupportedTypeScriptVersion": false,
        "sourceType": "module"
    },
    "env": {
        "browser": false,
        "node": true,
        "es6": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "plugins": [
        "@typescript-eslint"
    ],
    "ignorePatterns": [
        "**/node_modules/**",
        "/built/**",
        "/tests/**",
        "/lib/**",
        "/src/lib/*.generated.d.ts",
        "/scripts/**/*.js",
        "/scripts/**/*.d.*",
        "/internal/**",
        "/coverage/**"
    ],
    "rules": {
        "dot-notation": "error",
        "eqeqeq": "error",
        "no-caller": "error",
        "no-constant-condition": ["error", { "checkLoops": false }],
        "no-eval": "error",
        "no-extra-bind": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-return-await": "error",
        "no-restricted-globals": [
            "error",
            { "name": "setTimeout" },
            { "name": "clearTimeout" },
            { "name": "setInterval" },
            { "name": "clearInterval" },
            { "name": "setImmediate" },
            { "name": "clearImmediate" }
        ],
        "no-template-curly-in-string": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "prefer-const": "error",
        "prefer-object-spread": "error",
        "unicode-bom": ["error", "never"],
        "@typescript-eslint/naming-convention": [
            "error",
            { "selector": "typeLike", "format": ["PascalCase"], "filter": { "regex": "^(__String|[A-Za-z]+_[A-Za-z]+)$", "match": false } },
            { "selector": "interface", "format": ["PascalCase"], "custom": { "regex": "^I[A-Z]", "match": false }, "filter": { "regex": "^I(Arguments|TextWriter|O([A-Z][a-z]+[A-Za-z]*)?)$", "match": false } },
            { "selector": "variable", "format": ["camelCase", "PascalCase", "UPPER_CASE"], "leadingUnderscore": "allow", "filter": { "regex": "^(_{1,2}filename|_{1,2}dirname|_+|[A-Za-z]+_[A-Za-z]+)$", "match": false } },
            { "selector": "function", "format": ["camelCase", "PascalCase"], "leadingUnderscore": "allow", "filter": { "regex": "^[A-Za-z]+_[A-Za-z]+$", "match": false } },
            { "selector": "parameter", "format": ["camelCase"], "leadingUnderscore": "allow", "filter": { "regex": "^(_+|[A-Za-z]+_[A-Z][a-z]+)$", "match": false } },
            { "selector": "method", "format": ["camelCase", "PascalCase"], "leadingUnderscore": "allow", "filter": { "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$", "match": false } },
            { "selector": "memberLike", "format": ["camelCase"], "leadingUnderscore": "allow", "filter": { "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$", "match": false } },
            { "selector": "enumMember", "format": ["camelCase", "PascalCase"], "leadingUnderscore": "allow", "filter": { "regex": "^[A-Za-z]+_[A-Za-z]+$", "match": false } },
            { "selector": "property", "format": null }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/no-unused-expressions": ["error", { "allowTernary": true }]
    }
}
